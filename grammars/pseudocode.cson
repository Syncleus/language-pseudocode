fileTypes: [
  "pseudocode"
  "pseudo"
  "pso"
]
foldingStartMarker: "/\\*\\*|\\{\\s*$"
foldingStopMarker: "\\*\\*/|^\\s*\\}"
name: "pseudocode"
patterns: [
  {
      match: "REQUIRE|ENSURE|EXTENDS|ABSTRACT"
      name: "entity.name.tag.pseudocode"
  },
  {
    match: "(NIL|TRUE|FALSE|NOT|OR|AND)(?![a-z|A-Z])"
    name: "keyword.other.unit.pseudocode"
  },
  {
    match: " (IN|TO) "
    name: "keyword.control.pseudocode"
  },
  {
    match: "(DO)"
    name: "keyword.control.pseudocode"
  },
  {
    match: "(REPEAT)"
    name: "keyword.control.pseudocode"
  },
  {
    match: "(UNTIL)"
    name: "keyword.control.pseudocode"
  },
  {
    match: "(END )?(FOR)( ALL)?"
    name: "keyword.control.pseudocode"
  },
  {
    match: "(END )?(WHILE)"
    name: "keyword.control.pseudocode"
  },
  {
    match: "RETURN"
    name: "entity.name.section.pseudocode"
  },
  {
    match: "(END )?(FUNCTION|PROCEDURE)"
    name: "entity.name.function.pseudocode"
  },
  {
    match: "(END )?CLASS"
    name: "entity.name.class.pseudocode"
  },
  {
    match: "THIS"
    name: "entity.other.attribute-name.pseudocode"
  },
  {
    match: "INPUT|OUTPUT"
    name: "support.function.pseudocode"
  },
  {
    match: "String|Int|Float|Map|List|Set"
    name: "entity.other.attribute-name.pseudocode"
   },
  {
    match: "<=|>=|<>|!=|==|>|≠|<"
    name: "punctuation.definition.bold.pseudocode"
  },
  {
    match: "=|←"
    name: "punctuation.section.embedded.pseudocode"
  },
  {
    match: "ELSE"
    name: "keyword.control.pseudocode"
  },
  {
    match: "THEN"
    name: "keyword.control.pseudocode"
  },
  {
    match: "(END )?IF"
    name: "keyword.control.pseudocode"
  },
  {
    match: "([\\(](?![\\)])){1}"
    name: "meta.begin.brace.round.pseudocode"
  },
  {
    match: "((?<![\\(])[\\)])"
    name: "meta.end.brace.round.pseudocode"
  },
  {
    match: "([\\(](?=[\\)])){1}"
    name: "punctuation.definition.parameters.begin.bracket.round.pseudocode"
  },
  {
    match: "((?<=[\\(])[\\)])"
    name: "punctuation.definition.parameters.end.bracket.round.pseudocode"
  },
  {
    match: "([,]{1})"
    name: "punctuation.separator.list.pseudocode"
  },
  {
    match: "([\\[])"
    name: "meta.begin.brace.square.pseudocode"
  },
  {
    match: "([\\]])"
    name: "meta.end.brace.square.pseudocode"
  },
  {
    match: "([\\/\\/]{2}.*)"
    name: "comment.line.pseudocode"
  },
  {
    match: "\\/\\*(.*)\\*\\/"
    name: "comment.block.pseudocode"
  },
  {
    begin: "\\/\\*.*"
    end: ".*\\*\\/"
    name: "comment.block.pseudocode"
  },
  {
    begin: "\""
    end: "\""
    name: "string.quoted.double.pseudocode"
    patterns: [
      {
        match: "\\\\."
        name: "constant.character.escape.pseudocode"
      }
    ]
  }
]
scopeName: "source.pseudocode"
